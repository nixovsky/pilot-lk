"use strict";

var testSlider = document.querySelector('.testSlider');
if (testSlider) {
  var questions = document.querySelectorAll('.question');
  var nextQuestion = document.querySelector('.next-question');
  var answers = document.querySelectorAll('.answer');
  var testSwiper = new Swiper(testSlider, {
    spaceBetween: 30,
    effect: "fade",
    autoHeight: "true",
    grabCursor: "false",
    allowTouchMove: "false",
    simulateTouch: false
  });
  answers.forEach(function (answer) {
    answer.addEventListener('click', function () {
      answer.classList.toggle('marked');
      if (answer.classList.contains('marked')) {
        answer.querySelector('input').checked = true;
      } else {
        answer.querySelector('input').checked = false;
      }
      console.log(testSwiper.activeIndex, questions.length - 1);
      if (testSwiper.activeIndex == questions.length - 1) {
        nextQuestion.innerHTML = 'Отправить';
      }
      checkMarked(testSwiper.activeIndex, questions, nextQuestion);
    });
  });
  nextQuestion.addEventListener('click', function (e) {
    e.preventDefault();
    testSwiper.slideNext();
    nextQuestion.disabled = true;
    if (testSwiper.activeIndex == questions.length - 1) {
      nextQuestion.innerHTML = 'Отправить';
    }

    // answers.forEach((el) => {
    //     if (el.classList.contains('marked')){
    //         console.log(el)
    //     }
    // });
  });

  checkMarked(testSwiper.activeIndex, questions, nextQuestion);
}
function checkMarked(sliderId, questions, nextBtn) {
  var currentResponses = questions[sliderId].querySelectorAll('.answer');
  console.log(currentResponses);
  for (var i = 0; i < currentResponses.length; i++) {
    if (currentResponses[i].classList.contains('marked')) {
      nextBtn.disabled = false;
      break;
    } else {
      nextBtn.disabled = true;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6WyJ0ZXN0U2xpZGVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicXVlc3Rpb25zIiwicXVlcnlTZWxlY3RvckFsbCIsIm5leHRRdWVzdGlvbiIsImFuc3dlcnMiLCJ0ZXN0U3dpcGVyIiwiU3dpcGVyIiwic3BhY2VCZXR3ZWVuIiwiZWZmZWN0IiwiYXV0b0hlaWdodCIsImdyYWJDdXJzb3IiLCJhbGxvd1RvdWNoTW92ZSIsInNpbXVsYXRlVG91Y2giLCJmb3JFYWNoIiwiYW5zd2VyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsYXNzTGlzdCIsInRvZ2dsZSIsImNvbnRhaW5zIiwiY2hlY2tlZCIsImNvbnNvbGUiLCJsb2ciLCJhY3RpdmVJbmRleCIsImxlbmd0aCIsImlubmVySFRNTCIsImNoZWNrTWFya2VkIiwiZSIsInByZXZlbnREZWZhdWx0Iiwic2xpZGVOZXh0IiwiZGlzYWJsZWQiLCJzbGlkZXJJZCIsIm5leHRCdG4iLCJjdXJyZW50UmVzcG9uc2VzIiwiaSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxVQUFVLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLGFBQWEsQ0FBQztBQUN0RCxJQUFJRixVQUFVLEVBQUM7RUFDWCxJQUFJRyxTQUFTLEdBQUdGLFFBQVEsQ0FBQ0csZ0JBQWdCLENBQUMsV0FBVyxDQUFDO0VBQ3RELElBQUlDLFlBQVksR0FBR0osUUFBUSxDQUFDQyxhQUFhLENBQUMsZ0JBQWdCLENBQUM7RUFDM0QsSUFBSUksT0FBTyxHQUFHTCxRQUFRLENBQUNHLGdCQUFnQixDQUFDLFNBQVMsQ0FBQztFQUNsRCxJQUFJRyxVQUFVLEdBQUcsSUFBSUMsTUFBTSxDQUFDUixVQUFVLEVBQUU7SUFDcENTLFlBQVksRUFBRSxFQUFFO0lBQ2hCQyxNQUFNLEVBQUUsTUFBTTtJQUNkQyxVQUFVLEVBQUUsTUFBTTtJQUNsQkMsVUFBVSxFQUFFLE9BQU87SUFDbkJDLGNBQWMsRUFBRSxPQUFPO0lBQ3ZCQyxhQUFhLEVBQUU7RUFDbkIsQ0FBQyxDQUFDO0VBRUZSLE9BQU8sQ0FBQ1MsT0FBTyxDQUFDLFVBQUFDLE1BQU0sRUFBSTtJQUN0QkEsTUFBTSxDQUFDQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsWUFBTTtNQUNuQ0QsTUFBTSxDQUFDRSxTQUFTLENBQUNDLE1BQU0sQ0FBQyxRQUFRLENBQUM7TUFDakMsSUFBSUgsTUFBTSxDQUFDRSxTQUFTLENBQUNFLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBQztRQUNwQ0osTUFBTSxDQUFDZCxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUNtQixPQUFPLEdBQUcsSUFBSTtNQUNoRCxDQUFDLE1BQUk7UUFDREwsTUFBTSxDQUFDZCxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUNtQixPQUFPLEdBQUcsS0FBSztNQUNqRDtNQUNBQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ2hCLFVBQVUsQ0FBQ2lCLFdBQVcsRUFBRXJCLFNBQVMsQ0FBQ3NCLE1BQU0sR0FBRyxDQUFDLENBQUM7TUFFekQsSUFBSWxCLFVBQVUsQ0FBQ2lCLFdBQVcsSUFBSXJCLFNBQVMsQ0FBQ3NCLE1BQU0sR0FBRyxDQUFDLEVBQUM7UUFDL0NwQixZQUFZLENBQUNxQixTQUFTLEdBQUcsV0FBVztNQUN4QztNQUNBQyxXQUFXLENBQUNwQixVQUFVLENBQUNpQixXQUFXLEVBQUVyQixTQUFTLEVBQUVFLFlBQVksQ0FBQztJQUNoRSxDQUFDLENBQUM7RUFDTixDQUFDLENBQUM7RUFFRkEsWUFBWSxDQUFDWSxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsVUFBQ1csQ0FBQyxFQUFLO0lBQzFDQSxDQUFDLENBQUNDLGNBQWMsQ0FBQyxDQUFDO0lBQ2xCdEIsVUFBVSxDQUFDdUIsU0FBUyxDQUFDLENBQUM7SUFDdEJ6QixZQUFZLENBQUMwQixRQUFRLEdBQUcsSUFBSTtJQUM1QixJQUFJeEIsVUFBVSxDQUFDaUIsV0FBVyxJQUFJckIsU0FBUyxDQUFDc0IsTUFBTSxHQUFHLENBQUMsRUFBQztNQUMvQ3BCLFlBQVksQ0FBQ3FCLFNBQVMsR0FBRyxXQUFXO0lBQ3hDOztJQUVBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7RUFDSixDQUFDLENBQUM7O0VBQ0ZDLFdBQVcsQ0FBQ3BCLFVBQVUsQ0FBQ2lCLFdBQVcsRUFBRXJCLFNBQVMsRUFBRUUsWUFBWSxDQUFDO0FBQ2hFO0FBR0EsU0FBU3NCLFdBQVdBLENBQUVLLFFBQVEsRUFBRTdCLFNBQVMsRUFBRThCLE9BQU8sRUFBQztFQUMvQyxJQUFJQyxnQkFBZ0IsR0FBRy9CLFNBQVMsQ0FBQzZCLFFBQVEsQ0FBQyxDQUFDNUIsZ0JBQWdCLENBQUMsU0FBUyxDQUFDO0VBQ3RFa0IsT0FBTyxDQUFDQyxHQUFHLENBQUNXLGdCQUFnQixDQUFDO0VBRTdCLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHRCxnQkFBZ0IsQ0FBQ1QsTUFBTSxFQUFFVSxDQUFDLEVBQUUsRUFBQztJQUM3QyxJQUFJRCxnQkFBZ0IsQ0FBQ0MsQ0FBQyxDQUFDLENBQUNqQixTQUFTLENBQUNFLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBQztNQUNqRGEsT0FBTyxDQUFDRixRQUFRLEdBQUcsS0FBSztNQUN4QjtJQUNKLENBQUMsTUFBSTtNQUNERSxPQUFPLENBQUNGLFFBQVEsR0FBRyxJQUFJO0lBQzNCO0VBQ0o7QUFDSiIsImZpbGUiOiJzY3JpcHQuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IHRlc3RTbGlkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGVzdFNsaWRlcicpO1xuaWYgKHRlc3RTbGlkZXIpe1xuICAgIGxldCBxdWVzdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucXVlc3Rpb24nKTtcbiAgICBsZXQgbmV4dFF1ZXN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5leHQtcXVlc3Rpb24nKTtcbiAgICBsZXQgYW5zd2VycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbnN3ZXInKTtcbiAgICBsZXQgdGVzdFN3aXBlciA9IG5ldyBTd2lwZXIodGVzdFNsaWRlciwge1xuICAgICAgICBzcGFjZUJldHdlZW46IDMwLFxuICAgICAgICBlZmZlY3Q6IFwiZmFkZVwiLFxuICAgICAgICBhdXRvSGVpZ2h0OiBcInRydWVcIixcbiAgICAgICAgZ3JhYkN1cnNvcjogXCJmYWxzZVwiLFxuICAgICAgICBhbGxvd1RvdWNoTW92ZTogXCJmYWxzZVwiLFxuICAgICAgICBzaW11bGF0ZVRvdWNoOiBmYWxzZSxcbiAgICB9KVxuXG4gICAgYW5zd2Vycy5mb3JFYWNoKGFuc3dlciA9PiB7XG4gICAgICAgIGFuc3dlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGFuc3dlci5jbGFzc0xpc3QudG9nZ2xlKCdtYXJrZWQnKTtcbiAgICAgICAgICAgIGlmIChhbnN3ZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdtYXJrZWQnKSl7XG4gICAgICAgICAgICAgICAgYW5zd2VyLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBhbnN3ZXIucXVlcnlTZWxlY3RvcignaW5wdXQnKS5jaGVja2VkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0ZXN0U3dpcGVyLmFjdGl2ZUluZGV4LCBxdWVzdGlvbnMubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHRlc3RTd2lwZXIuYWN0aXZlSW5kZXggPT0gcXVlc3Rpb25zLmxlbmd0aCAtIDEpe1xuICAgICAgICAgICAgICAgIG5leHRRdWVzdGlvbi5pbm5lckhUTUwgPSAn0J7RgtC/0YDQsNCy0LjRgtGMJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoZWNrTWFya2VkKHRlc3RTd2lwZXIuYWN0aXZlSW5kZXgsIHF1ZXN0aW9ucywgbmV4dFF1ZXN0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBuZXh0UXVlc3Rpb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRlc3RTd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICAgIG5leHRRdWVzdGlvbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIGlmICh0ZXN0U3dpcGVyLmFjdGl2ZUluZGV4ID09IHF1ZXN0aW9ucy5sZW5ndGggLSAxKXtcbiAgICAgICAgICAgIG5leHRRdWVzdGlvbi5pbm5lckhUTUwgPSAn0J7RgtC/0YDQsNCy0LjRgtGMJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFuc3dlcnMuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgLy8gICAgIGlmIChlbC5jbGFzc0xpc3QuY29udGFpbnMoJ21hcmtlZCcpKXtcbiAgICAgICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhlbClcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSk7XG4gICAgfSlcbiAgICBjaGVja01hcmtlZCh0ZXN0U3dpcGVyLmFjdGl2ZUluZGV4LCBxdWVzdGlvbnMsIG5leHRRdWVzdGlvbik7XG59XG5cblxuZnVuY3Rpb24gY2hlY2tNYXJrZWQgKHNsaWRlcklkLCBxdWVzdGlvbnMsIG5leHRCdG4pe1xuICAgIGxldCBjdXJyZW50UmVzcG9uc2VzID0gcXVlc3Rpb25zW3NsaWRlcklkXS5xdWVyeVNlbGVjdG9yQWxsKCcuYW5zd2VyJyk7XG4gICAgY29uc29sZS5sb2coY3VycmVudFJlc3BvbnNlcylcbiAgICBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRSZXNwb25zZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICBpZiAoY3VycmVudFJlc3BvbnNlc1tpXS5jbGFzc0xpc3QuY29udGFpbnMoJ21hcmtlZCcpKXtcbiAgICAgICAgICAgIG5leHRCdG4uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIG5leHRCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufSJdfQ==
